name: 构建管理器

on:
  push:
    tags: [ "*" ]
    branches: [ "main" ]
    paths:
      - '.github/workflows/build.yml'
      - 'app/**'
      - 'apd/**'
      - 'build.gradle.kts'
      - 'gradle/libs.versions.toml'
  pull_request:
    branches: [ "main" ]
    paths:
      - '.github/workflows/build.yml'
      - 'app/**'
      - 'apd/**'
      - 'build.gradle.kts'
      - 'gradle/libs.versions.toml'
  workflow_call:
  workflow_dispatch:
    inputs:
      ENABLE_TELEGRAM:
        description: '是否发布到Telegram频道'
        required: true
        default: '不发布'
        type: choice
        options:
          - '发布'
          - '不发布'

jobs:
  build-manager:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      # 将secrets注入环境变量，避免在if条件中直接引用secrets
      BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
      SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 生成版本号
        id: parse_version
        run: |
          COMMIT_NUM=$(git rev-list --count HEAD)
          VERSION=$(echo "$COMMIT_NUM + 200 + 10000" | bc)
          echo "生成的版本号: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: 设置Java环境
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: 设置Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: 设置ninja
        uses: seanmiddleditch/gha-setup-ninja@v6
        with:
          version: 1.12.1

      - name: 设置Android SDK
        uses: android-actions/setup-android@v3
        with:
          packages: ''

      - name: 安装工具链
        run: |
          rustup default stable
          rustup update stable
          cargo install cargo-ndk
          rustup target install aarch64-linux-android

      - name: 缓存Rust
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: apd
          cache-targets: false

      - name: 使用Gradle构建
        run: |
          echo 'org.gradle.parallel=true' >> gradle.properties
          echo 'org.gradle.vfs.watch=true' >> gradle.properties
          echo 'org.gradle.jvmargs=-Xmx2048m' >> gradle.properties
          echo 'android.native.buildOutput=verbose' >> gradle.properties
          sed -i 's/org.gradle.configuration-cache=true//g' gradle.properties
          ./gradlew clean assembleRelease
          echo "BUILD_TOOL_VERSION=$(ls /usr/local/lib/android/sdk/build-tools/ | tail -n 1)" >> $GITHUB_ENV

      - name: 签名发布版
        if: ${{ env.SIGNING_KEY != '' }}
        continue-on-error: true
        uses: noriban/sign-android-release@v5.1
        id: sign_app
        with:
          releaseDirectory: app/build/outputs/apk/release
          signingKeyBase64: ${{ secrets.SIGNING_KEY }}
          alias: ${{ secrets.ALIAS }}
          keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
          keyPassword: ${{ secrets.KEY_PASSWORD }}

      - name: 上传构建产物
        if: ${{ env.SIGNING_KEY != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: APatch
          path: ${{steps.sign_app.outputs.signedReleaseFile}}

      - name: 发布到频道
        # 执行条件：非PR、main分支、非标签推送、用户选择发布到Telegram、存在BOT_TOKEN和SIGNING_KEY
        if: ${{ github.event_name != 'pull_request' && github.ref == 'refs/heads/main' && github.ref_type != 'tag' && github.event.inputs.ENABLE_TELEGRAM == 'true' && env.BOT_TOKEN != '' && env.SIGNING_KEY != '' }}
        run: |
          OUTPUT="app/build/outputs/apk/release"
          export Release=$(find $OUTPUT -name "*.apk")
          URL=$(python3 .github/scripts/telegram_url.py -1002058433411)
          curl -v "$URL" -F Release=@${{ steps.sign_app.outputs.signedReleaseFile }}
          URL=$(python3 .github/scripts/telegram_url.py -1001910818234)
          curl -v "$URL" -F Release=@${{ steps.sign_app.outputs.signedReleaseFile }}

      - name: 发布APK
        if: ${{ env.SIGNING_KEY != '' && github.ref_type == 'tag' }}
        continue-on-error: true
        uses: ncipollo/release-action@v1
        with:
          token: ${{ github.token }}
          tag: ${{ steps.parse_version.outputs.VERSION }}
          artifacts: ${{steps.sign_app.outputs.signedReleaseFile}}
          generateReleaseNotes: true
          makeLatest: true
          replacesArtifacts: true    
